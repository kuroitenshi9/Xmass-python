"""
Day 04
PrzesyÅ‚am wersjÄ™ "peÅ‚nÄ…" wczorajszego zadnia

Dany jest sÅ‚ownik logÃ³w jakiegoÅ› programu. Kluczem jest - timestamp (czas wystÄ…pienia), a wartoÅ›ciÄ… rodzaj loga. Waszym zadaniem jest stworzyÄ‡ funkcjÄ™, ktÃ³ra dla zadanego interwaÅ‚u zwraca jakiego rodzaju logi w tym czasie wystÄ…piÅ‚y (unikalne nazwy typÃ³w loga)

def get_logs (start_interv, end_interv, some_logs):
    pass

w zaÅ‚Ä…czniku lista logÃ³w



logs_timestamp.csv

PrzykÅ‚adowy sÅ‚ownik logÃ³w:

some_logs = {
    1564517408: 'ERROR',
    1562514432: 'WARNING',
    1564015907: 'WARNING4',
    1563822588: 'ERROR',
    1563125949: 'ERROR',
    1564225949: 'WARNING',
    1562491290: 'INFO',
    1563184020: 'ERROR',
    1562956120: 'WARNING',
    1564477808: 'WARNING2',
    1564421475: 'ERROR',
    1562764321: 'INFO',
    1562709301: 'ERROR1',
    1563900303: 'ERROR',
    1564125540: 'INFO4',
    1564010897: 'INFO',
    1564279899: 'INFO',
    1564456120: 'INFO',
    1564452850: 'ERROR',
    1564528675: 'WARNING'
}




PoniewaÅ¼ sÄ… to timestampy - czyli punkty czasowe moÅ¼emy zaÅ‚oÅ¼yÄ‡, Å¼e uÅ¼ytkownik bÄ™dzie podawaÅ‚ zakres czasowy w bardziej ludzkim formacie, jakim to juÅ¼ wasza decyzja ðŸ˜› 
Å¼eby wyjaÅ›niÄ‡ tutaj przykÅ‚ad odpakowania timestampu do formatu czasu https://repl.it/repls/HardtofindRoundSquares
jeÅ›li uÅ¼ytkownik podaje czas to raczej bÄ™dzie do podawaÅ‚ w jakimÅ› ludzkim formacie a nie timestampie, przy czym jeÅ›li rozwiÄ…zaÅ‚yÅ›cie zadanie z intami, to funkcja nie powinna siÄ™ tak naprawdÄ™ zmieniÄ‡ ðŸ™‚ 
Jedynie jest potrzebne pobranie czasu od uÅ¼ytkownika w odpowiednim formacie i konwersja do timestamp
"""

from datetime import datetime

def get_logs(start_interv, end_interv, dict):
    looking_logs = []
    start_interv = datetime.strptime(start_interv, "%d-%m-%Y")
    end_interv = datetime.strptime(end_interv,"%d-%m-%Y")
    start_interv = datetime.timestamp(start_interv)
    end_interv = datetime.timestamp(end_interv)
    for key, value in dict.items():
        if int(key) > start_interv and int(key) < end_interv:
            looking_logs.append(value)
        else:
            pass
    if len(looking_logs) > 0:
        return print(f"The log in the timeline {start_interv} - {end_interv}: ", looking_logs)
    else:
        return print(f"Sorry, no logs found in the timeline {start_interv} - {end_interv}")


with open('logs_timestamp.csv', 'r') as fopen:
    lines = fopen.readlines()
for l in range(len(lines)):
	lines[l] = lines[l].strip()

some_logs = {}
for l in lines:
    if l != '':
        l = l.split(",")
        key = l[0]
        value = l[1]
        some_logs[key] = value

# print(some_logs)

get_logs('01-01-2019', '03-12-2019', some_logs)

# def main():
#     start_interv = str(input("Give start date in format dd-mm-yyyy: "))
#     end_interv = str(input("Give end date in format dd-mm-yyyy: "))
#     print(get_logs(start_interv, end_interv, some_logs))

# if __name__ == '__main__':
#   main()